<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:ehcache="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
	xmlns:p="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
    http://www.springframework.org/schema/context    
    http://www.springframework.org/schema/context/spring-context-3.0.xsd  
    http://www.springframework.org/schema/tx   
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd   
    http://www.springframework.org/schema/aop   
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
    http://www.springframework.org/schema/cache 
    http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
    http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring  
    http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring-1.1.xsd">
	<context:annotation-config />

	<context:component-scan base-package="com.certus.aliyun.service,com.certus.aliyun.action,com.certus.action,com.certus.service,com.certus.dao" />
	<!-- <context:component-scan base-package="com.certus" /> -->
	<bean id="propertyConfig"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>

	<!-- 数据源配置 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClassName}"></property>
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>

		<!-- 初始化时的连接数 default:3 -->
		<property name="initialPoolSize" value="${initialPoolSize}" />
		<!-- 当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException,如设为0则无限期等待。单位毫秒。Default: 0 -->
		<property name="checkoutTimeout" value="${checkoutTimeout}" />
		<!-- 连接池中保留的最小的连接数 -->
		<property name="minPoolSize" value="${minPoolSize}" />
		<!-- 连接池中保留的最大的连接数 default:15 -->
		<property name="maxPoolSize" value="${maxPoolSize}" />
		<!-- 连接池中连接耗尽时,c3p0一次同时获取的连接数. default:3 -->
		<property name="acquireIncrement" value="${acquireIncrement}" />
		<!-- 取得连接的同时是否校验连接的有效性。Default: false -->
		<property name="testConnectionOnCheckin" value="${testConnectionOnCheckin}" />
		<!-- 是否在connection提交的时候校验其有效性。Default: false -->
		<property name="testConnectionOnCheckout" value="${testConnectionOnCheckout}" />
		<!-- 最大空闲时间,XX秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${maxIdleTime}" />
		<!-- 每XX秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="${idleConnectionTestPeriod}" />
		<!-- 用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素 -->
		<property name="maxStatements" value="${maxStatements}" />
		<property name="maxStatementsPerConnection" value="${maxStatementsPerConnection}" />
	</bean>

	<!-- 配置SqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:scapeGuiMybatisConfig.xml" />
		<property name="typeAliasesPackage" value="com.certus.vo"></property> 
		<property name="mapperLocations" value="classpath:mybatisMapper/*Mapper.xml"></property>
	</bean>

	<!-- 扫描Mapper文件目录 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.certus.dao" />
		<property name="markerInterface" value="com.certus.dao.BaseDao" />
	</bean>

	<!-- TransactionManager -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 事务控制的业务方法配置 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<!-- 除以上方法外默认都是只读事务 -->
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 事务控制拦截 -->
	<aop:config>
		<aop:pointcut id="servicePointcut" expression="execution(public * com.certus.service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="servicePointcut" />
	</aop:config>
	
</beans>  